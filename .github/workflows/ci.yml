name: Deploy Terraform Infra

on:
  push:
    branches:
      - main
    paths: ["**/*.tf"]
  pull_request:
    branches:
      - main
    paths: ["**/*.tf"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  TF_BACKEND_BUCKET: terraform-state-techchallenge
  TF_BACKEND_KEY: infraestrutura/state.tfstate
  TF_REGION: us-east-1
  CLUSTER_NAME: tech-challenge-cluster

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_REGION }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Inicializar Terraform com Backend S3
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ env.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.TF_REGION }}" \
            -backend-config="encrypt=true"

      - name: Validar Terraform
        run: terraform validate

      - name: Planejar Terraform
        run: terraform plan -var="db_username=tech_challenge" -var="db_password=TyH2qEhgnIj41B"

  deploy:
    name: Terraform Deploy
    needs: plan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_REGION }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Inicializar Terraform com Backend S3
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ env.TF_BACKEND_KEY }}" \
            -backend-config="region=${{ env.TF_REGION }}" \
            -backend-config="encrypt=true"

      - name: Aplicar Terraform
        run: terraform apply -auto-approve -var="db_username=tech_challenge" -var="db_password=TyH2qEhgnIj41B"

  install-cluster-components:
    name: Instalar Componentes do Cluster
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configurar AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_REGION }}

      - name: Obter kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.TF_REGION }}

      - name: Instalar Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Instalar Ingress NGINX Controller via Helm
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --set controller.kind=Deployment \
            --set controller.replicaCount=1 \
            --set controller.service.type=NodePort \
            --set controller.service.nodePorts.http=30080 \
            --set controller.service.nodePorts.https=30443 \
            --set controller.ingressClassResource.name=nginx \
            --set controller.ingressClassResource.default=false \
            --set controller.service.externalTrafficPolicy=Cluster

      - name: Instalar Cluster Autoscaler via Helm
        run: |
          helm repo add autoscaler https://kubernetes.github.io/autoscaler
          helm repo update
          helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
            --namespace kube-system \
            --set autoDiscovery.clusterName=${{ env.CLUSTER_NAME }} \
            --set awsRegion=${{ env.TF_REGION }} \
            --set rbac.create=true \
            --set extraArgs.balance-similar-node-groups=true \
            --set extraArgs.skip-nodes-with-local-storage=false \
            --set extraArgs.expander=least-waste \
            --set nodeSelector."kubernetes\.io/os"=linux \
            --set tolerations[0].key="node-role.kubernetes.io/control-plane" \
            --set tolerations[0].operator="Exists" \
            --set tolerations[0].effect="NoSchedule" \
            --set serviceAccount.create=true \
            --set serviceAccount.name=cluster-autoscaler

      - name: Instalar Metrics Server via Helm
        run: |
          helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
          helm repo update
          helm upgrade --install metrics-server metrics-server/metrics-server \
            --namespace kube-system \
            --set args={--kubelet-insecure-tls}